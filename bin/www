#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var connectDB = require('../db');  // Add this line to import connectDB
var gpt = require('../gpt'); // Add this line to import ExpenseGPT
var debug = require('debug')('express-test:server');
var http = require('http');
var socketIO = require('socket.io'); // Add this line to import socket.io

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

// Store all the user conversation records here
var gptMessage = [];

// Add a maximum size for the conversation record
const MAX_CONVERSATION_SIZE = 6;

var server; // Declare the server variable outside the connectDB promise block

// Connect to the database before creating the HTTP server
connectDB()
  .then(() => {
    // Create HTTP server.
    server = http.createServer(app); // Assign the server variable here

    // Set up socket.io to listen on the HTTP server
    var io = socketIO(server);

    io.on('connection', (socket) => {
      // Get data from the client
      const username = socket.handshake.query.username;
      const data = {
        monthSpent : socket.handshake.query.monthSpent,
        monthBudget : socket.handshake.query.monthBudget,
        monthRemaining : socket.handshake.query.monthRemaining,
        monthPrediction : socket.handshake.query.monthPrediction,
        monthCategory: socket.handshake.query.monthCategory,
        healthCheck : socket.handshake.query.healthCheck
      }
      
      // When a user connects, log their username to the console
      console.log(`\nUser connected with username: ${username}\n`);

      // Display the server message on the chat window
      io.emit('chatMessage', `${username} has joined the chat!`, 'server-message', 'global');

      // Add user record in the gptMessage record
      gptMessage.push({ username: username, conversationRecord: [] });

      // Handle sending a message
      socket.on('chatMessage', async (message, user, room) => {

        if (room === 'global') {
          // Broadcast the message to the global room
          io.emit('chatMessage', message, user, room);
        }
        else if (room.startsWith('expenseGPT')) {
          // Check if the message is for ExpenseGPT
          // Broadcast the user message 
          io.emit('chatMessage', message, user, room);

          // Get the user object from the gptMessage record
          const userObject = gptMessage.find(obj => obj.username === username);
          const conversationRecord = userObject.conversationRecord;
          conversationRecord.push({ role: "user", content: message });

          let gptResponse;
          try {
            // Ask chatgpt the message
            gptResponse = await gpt.askExpenseGPT(conversationRecord, username, data);
          } 
          catch (error) {
            if (error.code === 'rate_limit_exceeded') {
              // Rate limit exceeded
              gptResponse = "ExpenseGPT is currently experiencing high demand. Please try again in a moment.";
              console.log(error);
            } 
            else {
              // Other error network issue, server error
              gptResponse = "Sorry, we're currently unable to connect to ExpenseGPT. Please try again later.";
              console.log(error);
            }
          }

          // Broadcast the GPT response
          io.emit('chatMessage', gptResponse, 'ExpenseGPT', room);

          // Add the GPT response to the conversation record
          conversationRecord.push({ role: "assistant", content: gptResponse });

          // Limit the conversation record size
          if (conversationRecord.length > MAX_CONVERSATION_SIZE) {
            conversationRecord.shift(); // Remove the oldest message
            conversationRecord.shift(); // Remove the second oldest message
          }

          // Rewrite the gptMessage record in the gpt array
          gptMessage.find(obj => obj.username === username).conversationRecord = conversationRecord;

        }

      });

      // Handle disconnect
      socket.on('disconnect', () => {
        console.log(`\nUser disconnected: ${username}\n`);

        // Display the server message on the chat window
        io.emit('chatMessage', `${username} has left the chat!`, 'server-message', 'global');

        // Remove record from the GPT array
        gptMessage = gptMessage.filter(obj => obj.username !== username);
      });
    });

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((err) => {
    console.error('Error connecting to the database:', err);
    process.exit(1);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}