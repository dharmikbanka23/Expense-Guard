<!DOCTYPE html>
<html>

<head>
    <title>Expense Guard | Expenses</title>
    <link rel="icon" href="/images/logo-icon.png" type="image/x-icon">
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
  integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous"> -->
    <link rel='stylesheet' href='/stylesheets/sidebar.css'>
    <link rel='stylesheet' href='/stylesheets/expenses.css'>
    <script src="/javascripts/jquery.min.js"></script>
    <script src="/javascripts/stupidtable.js"></script>
</head>

<body>
    <div class="sidebar">
        <div class="header">
            <img src="/images/logo.png">
        </div>
        <div class="menu">
            <ul>
                <li>
                    <a href="/dashboard"><img src="/images/icons/dashboard_white.png">Dashboard</a>
                </li>
                <li>
                    <a href="/statistics"><img src="/images/icons/statistics_white.png">Statistics</a>
                </li>
                <li>
                    <a class="active"><img src="/images/icons/expenses_dark.svg">Expenses</a>
                </li>
                <li>
                    <a href="/adjust"><img src="/images/icons/adjust_white.png">Adjust</a>
                </li>
            </ul>
        </div>
        <div class="footer">
            <div class="menu">
                <ul>
                    <li>
                        <a href="/logout"><img src="/images/icons/profile_white.png">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div class="content">
        <!-- Start content here -->
        <div class="top">
            <div class="heading">
                <h1>Expenses</h1>
            </div>
            <div class="buttons">
                <a href="/expenses" style="display: none;" id="filter-button"><button>Filter <b>x</b></button></a>
                <button onclick="openModal()"><b>+</b> Add Expense</button>
            </div>
        </div>

        <!-- Modal for Add -->
        <div id="expenseModal" class="modal">
            <div class="modal-content">
                <!-- Form inside the modal -->
                <form action="/expenses/add" method="POST" class="modal-form" enctype="multipart/form-data">
                    <div>
                        <label for="category">Category:</label><br>
                        <select name="category" id="category" required>
                            <option value="" selected disabled>Select an option</option>
                            <option value="Food">Food</option>
                            <option value="Housing">Housing</option>
                            <option value="Transportation">Transportation</option>
                            <option value="Entertainment">Entertainment</option>
                            <option value="Utilities">Utilities</option>
                            <option value="Health">Health</option>
                            <option value="Education">Education</option>
                            <option value="Personal Care">Personal Care</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div>
                        <label for="expenseDate">Expense Date:</label><br>
                        <input type="date" id="expenseDate" name="expenseDate"
                            max="<%= new Date().toISOString().split('T')[0] %>" required>
                    </div>
                    <div>
                        <label for="amount">Amount:</label><br>
                        <input type="number" min="0" max="999999999" id="amount" name="amount" required>
                    </div>
                    <div>
                        <label for="expenseImage">Expense Bill:</label><br>
                        <input type="file" id="expenseImage" name="expenseImage" accept="image/*">
                    </div>
                    <div>
                        <label for="description">Description:</label><br>
                        <textarea id="description" name="description" maxlength="50"
                            oninput="updateCharCount(this)"></textarea>
                        <div class="char-count" id="charCount">0/50</div>
                    </div>
                    <div class="form-buttons">
                        <button type="button" onclick="closeModal()">Close</button>
                        <button type="submit">Save</button>
                    </div>
                </form>
            </div>
        </div>


        <div class="filter">
            <form action="/expenses/filter" method="POST">
                <button type="submit">Filter</button>
                <div class="field-area">
                    <div class="filter-field">
                        <label for="category">Category</label><br>
                        <select name="category" id="category">
                            <option value="" selected>Select an option</option>
                            <option value="Food">Food</option>
                            <option value="Housing">Housing</option>
                            <option value="Transportation">Transportation</option>
                            <option value="Entertainment">Entertainment</option>
                            <option value="Utilities">Utilities</option>
                            <option value="Health">Health</option>
                            <option value="Education">Education</option>
                            <option value="Personal Care">Personal Care</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="filter-field">
                        <label for="fromDate">From Date</label><br>
                        <input type="date" name="fromDate" id="fromDate"
                            max="<%= new Date().toISOString().split('T')[0] %>" onchange="setDate()">
                    </div>
                    <div class="filter-field">
                        <label for="toDate">To Date</label><br>
                        <input type="date" name="toDate" id="toDate" max="<%= new Date().toISOString().split('T')[0] %>"
                            onchange="setDate()">
                    </div>
                </div>
            </form>
        </div>

        <div class="table-area">
            <table class="table">
                <thead>
                    <tr>
                        <th data-sort="string" stupidsort style="width: 20%">Category</th>
                        <th data-sort="string" stupidsort style="width: 15%">Expense Date</th>
                        <th data-sort="int" stupidsort style="width: 15%">Amount</th>
                        <th data-sort="string" stupidsort style="width: 37.5%">Description</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <% for (let expense of expenseRecord) { %>
                        <tr id="<%= expense._id %>">
                            <td style="width: 20%">
                                <%= expense.category %>
                            </td>
                            <td style="width: 15%">
                                <%= expense.expenseDate.toISOString().split('T')[0] %>
                            </td>
                            <td style="width: 15%">
                                <%= expense.amount %>
                            </td>
                            <td style="width: 37.5%">
                                <%= expense.description %>
                            </td>
                            <td class="holder">
                                <!-- Image button -->
                                <% if (expense.expenseURL ) { %>
                                <div class="contain-1">
                                    <a href= '<%=expense.expenseURL%>' target="_blank"><img class="image-status" src="/images/icons/image-present.svg"></a>
                                </div>
                                <% } else { %>
                                <div class="contain-2">
                                    <img class="image-status" src="/images/icons/image-absent.svg">
                                </div>
                                <% } %>

                                <!-- Edit button -->
                                <button class="edit"
                                    onclick="openEditModal('<%= expense._id %>', '<%= expense.category %>', `<%= expense.expenseDate.toISOString().split('T')[0] %>`, '<%= expense.amount %>', '<%= expense.description %>')">Edit</button>
                                
                                <!-- Delete button -->
                                <button class="delete" onclick="confirmDelete('<%= expense._id %>')">Delete</button>
                            </td>
                        </tr>
                        <% } %>
                </tbody>
            </table>
        </div>




        <!-- Model for Edit -->
        <div id="expenseEditModal" class="modal">
            <div class="modal-content">
                <!-- Form inside the modal -->
                <form class="modal-form">
                    <!-- Hidden input field for expenseId -->
                    <input type="hidden" id="editExpenseId" name="editExpenseId">
                    <div>
                        <label for="editCategory">Category:</label><br>
                        <select name="editCategory" id="editCategory" required>
                            <option value="Food">Food</option>
                            <option value="Housing">Housing</option>
                            <option value="Transportation">Transportation</option>
                            <option value="Entertainment">Entertainment</option>
                            <option value="Utilities">Utilities</option>
                            <option value="Health">Health</option>
                            <option value="Education">Education</option>
                            <option value="Personal Care">Personal Care</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div>
                        <label for="editExpenseDate">Expense Date:</label><br>
                        <input type="date" id="editExpenseDate" name="editExpenseDate"
                            max="<%= new Date().toISOString().split('T')[0] %>" required>
                    </div>
                    <div>
                        <label for="editAmount">Amount:</label><br>
                        <input type="number" min="0" max="999999999" id="editAmount" name="editAmount" required>
                    </div>
                    <div>
                        <label for="editDescription">Description:</label><br>
                        <textarea id="editDescription" name="editDescription" maxlength="50"
                            oninput="updateEditCharCount(this)"></textarea>
                        <div class="char-count" id="charCountEdit">0/50</div>
                    </div>
                    <div class="form-buttons">
                        <button type="button" onclick="closeEditModal()">Close</button>
                        <button type="button" onclick="saveEditModel()">Save</button>
                    </div>
                </form>
            </div>
        </div>

    </div>
</body>

</html>

<script defer>
    // Sort tables after DOM is loaded
    $(document).ready(function () {
        $("table").stupidtable();
    });

    // Hide the button
    if (window.location.pathname.endsWith("/filter")) {
        document.getElementById("filter-button").style.display = "inline-block";
    }

    // Updating the char count
    function updateCharCount(textarea) {
        var charCountElement = document.getElementById('charCount');
        charCountElement.textContent = textarea.value.length + '/50';
    }

    // Updating the edit char count
    function updateEditCharCount(textarea) {
        var charCountElement = document.getElementById('charCountEdit');
        charCountElement.textContent = textarea.value.length + '/50';
    }




    // First modal
    var modal = document.getElementById('expenseModal');
    function openModal() {
        modal.style.display = 'flex';
    }
    function closeModal() {
        modal.style.display = 'none';
    }

    // Second modal
    var editModal = document.getElementById('expenseEditModal');

    function openEditModal(expenseId, category, expenseDate, amount, description) {
        document.getElementById('editExpenseId').value = expenseId;
        document.getElementById('editCategory').value = category;
        document.getElementById('editExpenseDate').value = expenseDate;
        document.getElementById('editAmount').value = amount;
        document.getElementById('editDescription').value = description;

        // Fixing the bug where the description length is not updating
        document.getElementById('charCountEdit').innerHTML = description.length + '/50';

        editModal.style.display = 'flex';
    }
    function closeEditModal() {
        editModal.style.display = 'none';
    }


    // Acting like a form
    function saveEditModel() {

        closeEditModal();
        const expenseId = document.getElementById('editExpenseId').value;
        const category = document.getElementById('editCategory').value;
        const expenseDate = document.getElementById('editExpenseDate').value;
        const amount = document.getElementById('editAmount').value;
        const description = document.getElementById('editDescription').value;

        const data = {
            editExpenseId: expenseId,
            editCategory: category,
            editExpenseDate: expenseDate,
            editAmount: amount,
            editDescription: description,
        };

        //1. Do fetch
        fetch('/expenses/edit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                console.log('Server response:', response);

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                //2. Update the row by row ID which is the expenseID
                updateTableRow(expenseId, data)
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });
    }


    // Function to update the table row in the DOM
    function updateTableRow(expenseId, updatedExpense) {

        console.log('Updating table row:', expenseId, updatedExpense);

        const table = document.querySelector('.table');

        // Modified selector to handle IDs starting with a numeral
        const rowToUpdate = table.querySelector(`[id="${expenseId}"]`);

        if (rowToUpdate) {
            rowToUpdate.querySelector('td:nth-child(1)').textContent = updatedExpense.editCategory;
            rowToUpdate.querySelector('td:nth-child(2)').textContent = updatedExpense.editExpenseDate;
            rowToUpdate.querySelector('td:nth-child(3)').textContent = updatedExpense.editAmount;
            rowToUpdate.querySelector('td:nth-child(4)').textContent = updatedExpense.editDescription;

            const editButton = rowToUpdate.querySelector('.edit');
            editButton.setAttribute('onclick', `openEditModal('${updatedExpense.editExpenseId}', '${updatedExpense.editCategory}', '${updatedExpense.editExpenseDate}', '${updatedExpense.editAmount}', '${updatedExpense.editDescription}')`);
        }

    }

    // Deleting an expense
    function confirmDelete(expenseId) {
        if (confirm("Are you sure you want to delete this expense?")) {
            fetch(`/expenses/delete/${expenseId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`); /////////////////////////////////////
                    }
                    // After successful deletion, you can reload the page with location.reload(); (or)

                    // After successful deletion, remove the row from the table
                    document.getElementById(expenseId).remove();
                })
                .catch(error => {
                    console.error('Error during DELETE request:', error);
                    ////////////////////////////////////////////////////////////////////////////////////
                });
        }
    }


    function setDate() {
        var fromDateInput = document.getElementById("fromDate");
        var toDateInput = document.getElementById("toDate");
        var today = new Date().toISOString().split('T')[0];
        // Set max date for "From Date" to the selected "To Date" or today if not set
        fromDateInput.setAttribute('max', toDateInput.value || today);
        // Set min date for "To Date" to the selected "From Date" or an empty string if not set
        toDateInput.setAttribute('min', fromDateInput.value || "");
    }
</script>